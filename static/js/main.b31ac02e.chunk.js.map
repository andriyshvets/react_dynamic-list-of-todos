{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selectUser","selectedUserId","useState","query","setQuery","appliedQuery","setAppliedQuery","status","setStatus","random","setRandom","applyQuery","useCallback","f","delay","timerId","clearTimeout","args","setTimeout","debounce","readyTodos","filteredTodos","filter","title","toLowerCase","includes","completed","todosForRender","renderTodos","array","newArr","i","length","j","Math","floor","randomize","className","type","value","onChange","event","target","onClick","state","map","userId","id","classNames","readOnly","API_URL","getTodos","a","fetch","response","json","getUser","CurrentUser","user","setUser","error","setError","useEffect","userFromServer","name","email","phone","App","setSelectedUserId","setTodos","errorMessage","setErrorMessage","todosFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b31ac02e.chunk.js","sourcesContent":["import React, {\n  ChangeEvent,\n  useState,\n  useCallback,\n} from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\n\ntype Props = {\n  todos: Todo[];\n  selectUser: (id: number) => void;\n  selectedUserId: number;\n};\n\ntype FuncArg = (v: string) => void;\n\nconst debounce = (f: FuncArg, delay: number) => {\n  let timerId: number;\n\n  return (...args: string[]) => {\n    clearTimeout(timerId);\n    timerId = setTimeout(f, delay, ...args);\n  };\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectUser,\n  selectedUserId,\n}) => {\n  const [query, setQuery] = useState('');\n  const [appliedQuery, setAppliedQuery] = useState('');\n  const [status, setStatus] = useState('All');\n  const [random, setRandom] = useState(false);\n\n  const applyQuery = useCallback(\n    debounce(setAppliedQuery, 1000),\n    [],\n  );\n\n  const filterTitle = (event: ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    setQuery(value);\n    applyQuery(value);\n  };\n\n  const changeStatus = (event: ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    setStatus(value);\n  };\n\n  const todosForRender = () => {\n    const filteredTodos = todos.filter(({ title }) => {\n      const changeTitle = title.toLowerCase();\n\n      return changeTitle.includes(appliedQuery.toLowerCase());\n    });\n\n    switch (status) {\n      case 'Active':\n        return filteredTodos.filter(({ completed }) => !completed);\n\n      case 'Completed':\n        return filteredTodos.filter(({ completed }) => completed);\n\n      default:\n        return filteredTodos;\n    }\n  };\n\n  const randomize = (array: Todo[]) => {\n    const newArr = [...array];\n\n    for (let i = newArr.length - 1; i > 0; i -= 1) {\n      const j = Math.floor(Math.random() * (i + 1));\n\n      [newArr[i], newArr[j]] = [newArr[j], newArr[i]];\n    }\n\n    return newArr;\n  };\n\n  const readyTodos = todosForRender();\n  const renderTodos = random ? randomize(readyTodos) : readyTodos;\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <p>Search by title</p>\n      <label>\n        <input type=\"text\" value={query} onChange={filterTitle} />\n      </label>\n      <select\n        value={status}\n        onChange={changeStatus}\n        className=\"TodoList__select\"\n      >\n        <option>All</option>\n        <option>Active</option>\n        <option>Completed</option>\n      </select>\n\n      <button\n        type=\"button\"\n        onClick={() => setRandom(state => !state)}\n        className=\"TodoList__random\"\n      >\n        Randomize\n      </button>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\" data-cy=\"listOfTodos\">\n          {renderTodos.map(({\n            userId,\n            completed,\n            title,\n            id,\n          }) => (\n            <li\n              className={classNames(\n                'TodoList__item',\n                { 'TodoList__item--checked': completed },\n                { 'TodoList__item--unchecked': !completed },\n              )}\n              key={id}\n            >\n              <label>\n                <input type=\"checkbox\" readOnly />\n                <p>{title}</p>\n              </label>\n\n              <button\n                data-cy=\"userButton\"\n                className={classNames('TodoList__user-button button', {\n                  'TodoList__user-button--selected': userId === selectedUserId,\n                })}\n                type=\"button\"\n                onClick={() => selectUser(userId)}\n              >\n                {`User ${userId}`}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","const API_URL = 'https://mate.academy/students-api';\n\nexport async function getTodos(): Promise<Todo[]> {\n  const response = await fetch(`${API_URL}/todos`);\n\n  return response.json();\n}\n\nexport async function getUser(userId: number): Promise<User> {\n  const response = await fetch(`${API_URL}/users/${userId}`);\n\n  return response.json();\n}\n","import React, { useState, useEffect } from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api';\n\ntype Props = {\n  userId: number;\n  selectUser: (id: number) => void;\n};\n\nexport const CurrentUser: React.FC<Props> = ({ userId, selectUser }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    async function response() {\n      try {\n        const userFromServer = await getUser(userId);\n\n        setUser(userFromServer);\n      } catch {\n        setError('Can not load user');\n      }\n    }\n\n    response();\n  }, [userId]);\n\n  return (\n    <>\n      {user ? (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>{`Selected user: ${user.id}`}</span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\" data-cy=\"userName\">{user.name}</h3>\n          <p className=\"CurrentUser__email\">{user.email}</p>\n          <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n          <button\n            type=\"button\"\n            onClick={() => selectUser(0)}\n            className=\"CurrentUser__clear\"\n          >\n            Clear\n          </button>\n        </div>\n      ) : (<p>{error}</p>)}\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\nconst App: React.FC = () => {\n  const [\n    selectedUserId,\n    setSelectedUserId,\n  ] = useState(0);\n\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  useEffect(() => {\n    async function response() {\n      try {\n        const todosFromServer = await getTodos();\n\n        setTodos(todosFromServer);\n      } catch {\n        setErrorMessage('Can not load todos');\n      }\n    }\n\n    response();\n  }, []);\n\n  const selectUser = (userId: number) => {\n    setSelectedUserId(userId);\n  };\n\n  return (\n    <div className=\"App\">\n      {errorMessage.length === 0 ? (\n        <>\n          <div className=\"App__sidebar\">\n            <TodoList\n              todos={todos}\n              selectUser={selectUser}\n              selectedUserId={selectedUserId}\n            />\n          </div>\n\n          <div className=\"App__content\">\n            <div className=\"App__content-container\">\n              {selectedUserId ? (\n                <CurrentUser\n                  userId={selectedUserId}\n                  selectUser={selectUser}\n                />\n              ) : 'No user selected'}\n            </div>\n          </div>\n        </>\n      ) : (<p className=\"App__error\">{errorMessage}</p>)}\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}